"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2378],{9766:(e,a,o)=>{o.r(a),o.d(a,{assets:()=>r,contentTitle:()=>t,default:()=>l,frontMatter:()=>n,metadata:()=>d,toc:()=>m});var s=o(4848),i=o(8453);const n={slug:"ciclo-de-vida-das-apis",title:"Ciclo de Vida das APIs",authors:["it0dan"],tags:["APIs","ciclo de vida","monitoramento","aposentadoria","versionamento","api first","testes"]},t="Ciclo de Vida das APIs",d={permalink:"/blog/ciclo-de-vida-das-apis",editUrl:"https://github.com/universo01/website/blog/2024-07-20-ciclo-de-vida-das-apis.md",source:"@site/blog/2024-07-20-ciclo-de-vida-das-apis.md",title:"Ciclo de Vida das APIs",description:"Assim como os seres vivos, as APIs t\xeam um ciclo de vida. E em cada est\xe1gio do desenvolvimento de uma API, existem recomenda\xe7\xf5es e boas pr\xe1ticas a serem seguidas. O intuito deste conte\xfado \xe9 definir o significado e como voc\xea pode potencializar sua estrat\xe9gia de neg\xf3cios a partir da compreens\xe3o do ciclo de vida de uma API.",date:"2024-07-20T00:00:00.000Z",tags:[{inline:!0,label:"APIs",permalink:"/blog/tags/ap-is"},{inline:!0,label:"ciclo de vida",permalink:"/blog/tags/ciclo-de-vida"},{inline:!0,label:"monitoramento",permalink:"/blog/tags/monitoramento"},{inline:!0,label:"aposentadoria",permalink:"/blog/tags/aposentadoria"},{inline:!0,label:"versionamento",permalink:"/blog/tags/versionamento"},{inline:!0,label:"api first",permalink:"/blog/tags/api-first"},{inline:!0,label:"testes",permalink:"/blog/tags/testes"}],readingTime:7.48,hasTruncateMarker:!1,authors:[{name:"Dan",title:"Integration Architect",url:"https://github.com/it0dan",imageURL:"https://github.com/it0dan.png",key:"it0dan"}],frontMatter:{slug:"ciclo-de-vida-das-apis",title:"Ciclo de Vida das APIs",authors:["it0dan"],tags:["APIs","ciclo de vida","monitoramento","aposentadoria","versionamento","api first","testes"]},unlisted:!1,nextItem:{title:"Observabilidade de APIs",permalink:"/blog/observabilidade-de-apis"}},r={authorsImageUrls:[void 0]},m=[{value:"Planejamento",id:"planejamento",level:2},{value:"Design",id:"design",level:2},{value:"Desenvolvimento",id:"desenvolvimento",level:2},{value:"Testes",id:"testes",level:2},{value:"Publica\xe7\xe3o",id:"publica\xe7\xe3o",level:2},{value:"Monitoramento",id:"monitoramento",level:2},{value:"Aposentadoria",id:"aposentadoria",level:2},{value:"Conclus\xe3o",id:"conclus\xe3o",level:2}];function c(e){const a={h2:"h2",li:"li",p:"p",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(a.p,{children:"Assim como os seres vivos, as APIs t\xeam um ciclo de vida. E em cada est\xe1gio do desenvolvimento de uma API, existem recomenda\xe7\xf5es e boas pr\xe1ticas a serem seguidas. O intuito deste conte\xfado \xe9 definir o significado e como voc\xea pode potencializar sua estrat\xe9gia de neg\xf3cios a partir da compreens\xe3o do ciclo de vida de uma API."}),"\n",(0,s.jsx)(a.p,{children:"Antes de mais nada, temos que compreender que APIs n\xe3o s\xe3o simplesmente ativos tecnol\xf3gicos, s\xe3o ativos de neg\xf3cio. A estrat\xe9gia de APIs deve estar conectada com a estrat\xe9gia de neg\xf3cios para que as organiza\xe7\xf5es consigam aumentar a experi\xeancia dos clientes aplicando conceitos de conectividade moderna, como arquitetura orientada a eventos, microsservi\xe7os, computa\xe7\xe3o em nuvem, intelig\xeancia artificial, open everything, e que estejam focadas em se tornarem cada vez mais conectadas, digitais e abertas!"}),"\n",(0,s.jsx)(a.p,{children:"O ciclo de vida das APIs \xe9 o conceito em que elas existem sob v\xe1rias fases, e cada uma tem sua relev\xe2ncia em todo o processo de desenvolvimento, opera\xe7\xf5es e estrat\xe9gias de neg\xf3cio da organiza\xe7\xe3o. \xc9 importante ressaltar que n\xe3o existe consenso na comunidade sobre quais s\xe3o todos os est\xe1gios de vida de uma API, porque depender\xe1 de diversos fatores como pol\xedticas internas de desenvolvimento de APIs, processos de governan\xe7a e opera\xe7\xf5es da organiza\xe7\xe3o, tipo de API, casos de uso e etc. Ou seja, voc\xeas encontrar\xe3o conte\xfados que falam sobre 3 est\xe1gios, 4 est\xe1gios, 5 est\xe1gios e por a\xed vai. No fim das contas, a quantidade de est\xe1gios n\xe3o \xe9 o mais relevante, mas sim a explica\xe7\xe3o do ciclo como um todo."}),"\n",(0,s.jsx)(a.p,{children:"Nesse conte\xfado, dividiremos o ciclo de vida em 7 est\xe1gios, que s\xe3o:"}),"\n",(0,s.jsxs)(a.ul,{children:["\n",(0,s.jsx)(a.li,{children:"Planejamento"}),"\n",(0,s.jsx)(a.li,{children:"Design"}),"\n",(0,s.jsx)(a.li,{children:"Desenvolvimento"}),"\n",(0,s.jsx)(a.li,{children:"Testes"}),"\n",(0,s.jsx)(a.li,{children:"Publica\xe7\xe3o"}),"\n",(0,s.jsx)(a.li,{children:"Monitoramento"}),"\n",(0,s.jsx)(a.li,{children:"Aposentadoria"}),"\n"]}),"\n",(0,s.jsx)(a.h2,{id:"planejamento",children:"Planejamento"}),"\n",(0,s.jsx)(a.p,{children:"Todas as fases do ciclo de vida da API t\xeam sua devida import\xe2ncia, mas \xe9 fato que se a primeira delas n\xe3o for bem planejada e executada, impactar\xe1 diretamente em todas as outras fases, seja no prazo de entrega, no desenvolvimento da pr\xf3pria API, na expectativa dos consumidores e por a\xed vai. Ent\xe3o, \xe9 preciso ter em mente que a API \xe9 concebida para ser utilizada; esse \xe9 o prop\xf3sito principal dela! No planejamento, todas as partes interessadas (stakeholders) dever\xe3o participar. Pessoas de backend, frontend, opera\xe7\xf5es, seguran\xe7a, de neg\xf3cio e tamb\xe9m poss\xedveis consumidores dessa API. No artigo em que escrevi sobre API First, aprofundo na import\xe2ncia e os benef\xedcios de adotar essa abordagem de desenvolvimento. Sua interface primeiro, a implementa\xe7\xe3o depois! Esse \xe9 um dos princ\xedpios de API First. Sendo assim, o planejamento se torna vital para todo o ciclo de vida, mapeando quais s\xe3o os cen\xe1rios de uso, recursos, opera\xe7\xf5es, patterns de seguran\xe7a, design e versionamento que ser\xe3o utilizados. Tudo isso deve ser definido no planejamento."}),"\n",(0,s.jsx)(a.h2,{id:"design",children:"Design"}),"\n",(0,s.jsx)(a.p,{children:'Ap\xf3s o planejamento, come\xe7amos de fato a colocar a "m\xe3o na massa". Nessa fase, criamos a interface/contrato da nossa API, desenhando tudo que foi pensado e discutido no planejamento em um documento chamado swagger, utilizando a especifica\xe7\xe3o OpenAPI. Ent\xe3o, faremos o design dos par\xe2metros, recursos, opera\xe7\xf5es, autentica\xe7\xe3o, autoriza\xe7\xe3o, status codes, error handlings, modelos e etc. Sua documenta\xe7\xe3o deve ser autodescritiva! Outro princ\xedpio de API First. Quanto maior a experi\xeancia do desenvolvedor, mais r\xe1pido ser\xe1 o ROI, a absor\xe7\xe3o pelos consumidores e tamb\xe9m a dissemina\xe7\xe3o dessa API no mercado.'}),"\n",(0,s.jsx)(a.h2,{id:"desenvolvimento",children:"Desenvolvimento"}),"\n",(0,s.jsx)(a.p,{children:"A utiliza\xe7\xe3o de ferramentas para automatizar e otimizar todo o processo de cria\xe7\xe3o e exposi\xe7\xe3o de uma API \xe9 necess\xe1ria, mas no desenvolvimento, ela se faz ainda mais importante. Ferramentas que consigam, a partir do contrato, gerar SDKs e mocks para que consumidores possam ir testando e dando feedback (e tamb\xe9m desenvolvendo as aplica\xe7\xf5es que v\xe3o consumir essa API) e ferramentas que consigam traduzir o modelo l\xf3gico de dados para modelo l\xf3gico computacional para que assim o desenvolvedor do backend consiga otimizar seu desenvolvimento. Esse \xe9 um conceito em engenharia de software que chamamos de paralelismo, e \xe9 uma das ess\xeancias e um dos maiores benef\xedcios da abordagem API First."}),"\n",(0,s.jsx)(a.h2,{id:"testes",children:"Testes"}),"\n",(0,s.jsx)(a.p,{children:"Os testes tamb\xe9m fazem parte do desenvolvimento. Voc\xea n\xe3o testa s\xf3 quando vai colocar em produ\xe7\xe3o e sim durante todo o ciclo de desenvolvimento, certo? Certo?? Mas antes da virada para produ\xe7\xe3o, ser\xe3o feitos mais e mais testes para garantir que a publica\xe7\xe3o seja bem-sucedida! E assim como na fase de desenvolvimento, o maior aliado na fase de testes \xe9 o pr\xf3prio cliente, que ser\xe3o os consumidores dessa API de fato. Ent\xe3o, trabalhar com o conceito de beta testers \xe9 importante para a estrat\xe9gia como um todo, pois eles trar\xe3o feedback e com certeza (absoluta!) encontrar\xe3o erros, e ajustes ser\xe3o realizados. A utiliza\xe7\xe3o de mocks para acelerar o processo e diminuir o atrito nos testes de integra\xe7\xe3o tamb\xe9m \xe9 essencial. Al\xe9m disso, ferramentas de API Testing s\xe3o de extrema import\xe2ncia para que sejam validados os diversos tipos de cen\xe1rios que foram mapeados no planejamento, bem como testes de carga e seguran\xe7a."}),"\n",(0,s.jsx)(a.h2,{id:"publica\xe7\xe3o",children:"Publica\xe7\xe3o"}),"\n",(0,s.jsx)(a.p,{children:"Um ponto que n\xe3o foi comentado na fase do planejamento (propositalmente) e que deve ser desenhado nela \xe9 a estrat\xe9gia de divulga\xe7\xe3o dessa API, o go-to-market. Como disse no in\xedcio deste conte\xfado, a estrat\xe9gia de APIs deve estar conectada com a estrat\xe9gia de neg\xf3cios; temos que pensar nas nossas APIs como um produto, por isso o lan\xe7amento deve ser pensado estrategicamente tamb\xe9m. Qual o p\xfablico-alvo? Como ser\xe1 feita a divulga\xe7\xe3o? Por onde ser\xe1 feita a divulga\xe7\xe3o? Qual percentual de consumidores utilizando a API pretendemos alcan\xe7ar em X tempo? Essas s\xe3o algumas perguntas que devem estar respondidas desde a fase do planejamento, para que quando a API seja publicada, consigamos medir se os objetivos iniciais mapeados foram alcan\xe7ados. A utiliza\xe7\xe3o de um portal de desenvolvedores \xe9 fundamental, pois l\xe1 \xe9 a vitrine de suas APIs e \xe9 aliado na estrat\xe9gia de dissemina\xe7\xe3o dessa API para todo o ecossistema de consumidores, sejam parceiros, clientes internos ou externos."}),"\n",(0,s.jsx)(a.h2,{id:"monitoramento",children:"Monitoramento"}),"\n",(0,s.jsx)(a.p,{children:"Esperamos que o monitoramento seja a fase mais duradoura, e inversamente proporcional \xe0 dura\xe7\xe3o esperamos que sejam os problemas. Mas como diria minha v\xf3, querer n\xe3o \xe9 poder! \xc9 fato que problemas v\xe3o surgir e que a API precisar\xe1 ser melhorada, que coisas planejadas no in\xedcio talvez n\xe3o aconte\xe7am da forma esperada, que o mercado ou regula\xe7\xe3o mudou e agora \xe9 necess\xe1rio se adaptar\u2026 S\xe3o diversos os motivos para entender que monitorar a API \xe9 pe\xe7a chave para garantir que ela esteja acess\xedvel e altamente dispon\xedvel. A cria\xe7\xe3o de processo de retroalimenta\xe7\xe3o de melhoria cont\xednua \xe9 necess\xe1rio para garantir que a API esteja saud\xe1vel atrav\xe9s da an\xe1lise de status codes, lat\xeancia m\xe9dia, tamanho do payload e etc. Garantir que est\xe1 sendo utilizada, informa\xe7\xf5es como quantidade de aplica\xe7\xf5es que consomem, top 10 de aplica\xe7\xf5es, percentual de crescimento em X tempo, aplica\xe7\xf5es engajadas e desengajadas. E claro, n\xe3o s\xf3 monitoramento reativo, mas \xe9 necess\xe1rio monitoramento proativo, onde seja poss\xedvel configurar gatilhos a partir de comportamentos anormais da API que disparem alertas para que seja sanado um problema antes mesmo de acontecer, impactando o m\xednimo poss\xedvel as aplica\xe7\xf5es e consequentemente aumentando a experi\xeancia dos clientes. A utiliza\xe7\xe3o de uma plataforma de gerenciamento de APIs se torna item obrigat\xf3rio, pois ela conseguir\xe1 trazer todos esses dados de telemetria das APIs para que o monitoramento seja trabalhado de forma reativa e proativa, trazendo assim observabilidade do ecossistema de APIs da organiza\xe7\xe3o."}),"\n",(0,s.jsx)(a.h2,{id:"aposentadoria",children:"Aposentadoria"}),"\n",(0,s.jsx)(a.p,{children:"As APIs tamb\xe9m aposentam, e essa \xe9 a \xfaltima fase do ciclo de vida de uma API. Geralmente uma API \xe9 aposentada porque tem muitos bugs, \xe9 insegura, ineficiente, os custos s\xe3o altos, o servi\xe7o n\xe3o serve mais ao prop\xf3sito de neg\xf3cio e n\xe3o atende mais casos de uso. S\xe3o diversos os motivos para que uma API seja aposentada, e assim como em qualquer fase, o foco sempre deve ser em quem vai consumi-la, para que o impacto (nesse caso, da aposentadoria) seja o m\xednimo poss\xedvel. Aqui, comunica\xe7\xe3o \xe9 palavra-chave, os consumidores devem ser comunicados da forma mais transparente poss\xedvel que a API ser\xe1 aposentada, por que ser\xe1, quando ser\xe1 e como ser\xe1. Al\xe9m da comunica\xe7\xe3o atrav\xe9s dos canais com o cliente, tamb\xe9m h\xe1 estrat\xe9gias na pr\xf3pria API que podem auxiliar, como a utiliza\xe7\xe3o do header API Sunset, onde no retorno do response \xe9 inserido o header sunset com a data final daquela API. A ideia principal em cima do versionamento ou aposentadoria de uma API \xe9 que a mudan\xe7a deve ser gradual, assim como o p\xf4r-do-sol, para que gere o m\xednimo de impacto nos consumidores."}),"\n",(0,s.jsx)(a.h2,{id:"conclus\xe3o",children:"Conclus\xe3o"}),"\n",(0,s.jsx)(a.p,{children:"Nesse artigo, definimos o que \xe9 o ciclo de vida das APIs, quais s\xe3o as fases e as boas pr\xe1ticas que utilizamos em cada uma para garantir que a API cumpra o prop\xf3sito dela, que \xe9 ser utilizada! Ouso a dizer que \xe9 imposs\xedvel ter sucesso em todas as fases sem um processo de governan\xe7a que garanta consist\xeancia, seguran\xe7a e qualidade em escala para todo o processo de desenvolvimento e opera\xe7\xf5es das APIs. Seguindo as recomenda\xe7\xf5es deste artigo, provavelmente sua estrat\xe9gia de neg\xf3cios ser\xe1 potencializada pela sua estrat\xe9gia de API, e \xe9 exatamente sobre isso, o mindset de API Economy. Obrigado por quem leu at\xe9 aqui, nos vemos no pr\xf3ximo!"})]})}function l(e={}){const{wrapper:a}={...(0,i.R)(),...e.components};return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,a,o)=>{o.d(a,{R:()=>t,x:()=>d});var s=o(6540);const i={},n=s.createContext(i);function t(e){const a=s.useContext(n);return s.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function d(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),s.createElement(n.Provider,{value:a},e.children)}}}]);
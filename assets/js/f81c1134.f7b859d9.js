"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8130],{7735:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"ciclo-de-vida-das-apis","metadata":{"permalink":"/blog/ciclo-de-vida-das-apis","editUrl":"https://github.com/universo01/website/blog/2024-07-20-ciclo-de-vida-das-apis.md","source":"@site/blog/2024-07-20-ciclo-de-vida-das-apis.md","title":"Ciclo de Vida das APIs","description":"Assim como os seres vivos, as APIs t\xeam um ciclo de vida. E em cada est\xe1gio do desenvolvimento de uma API, existem recomenda\xe7\xf5es e boas pr\xe1ticas a serem seguidas. O intuito deste conte\xfado \xe9 definir o significado e como voc\xea pode potencializar sua estrat\xe9gia de neg\xf3cios a partir da compreens\xe3o do ciclo de vida de uma API.","date":"2024-07-20T00:00:00.000Z","tags":[{"inline":true,"label":"APIs","permalink":"/blog/tags/ap-is"},{"inline":true,"label":"ciclo de vida","permalink":"/blog/tags/ciclo-de-vida"},{"inline":true,"label":"monitoramento","permalink":"/blog/tags/monitoramento"},{"inline":true,"label":"aposentadoria","permalink":"/blog/tags/aposentadoria"},{"inline":true,"label":"versionamento","permalink":"/blog/tags/versionamento"},{"inline":true,"label":"api first","permalink":"/blog/tags/api-first"},{"inline":true,"label":"testes","permalink":"/blog/tags/testes"}],"readingTime":7.48,"hasTruncateMarker":false,"authors":[{"name":"Dan","title":"Integration Architect","url":"https://github.com/it0dan","imageURL":"https://github.com/it0dan.png","key":"it0dan"}],"frontMatter":{"slug":"ciclo-de-vida-das-apis","title":"Ciclo de Vida das APIs","authors":["it0dan"],"tags":["APIs","ciclo de vida","monitoramento","aposentadoria","versionamento","api first","testes"]},"unlisted":false,"nextItem":{"title":"Observabilidade de APIs","permalink":"/blog/observabilidade-de-apis"}},"content":"Assim como os seres vivos, as APIs t\xeam um ciclo de vida. E em cada est\xe1gio do desenvolvimento de uma API, existem recomenda\xe7\xf5es e boas pr\xe1ticas a serem seguidas. O intuito deste conte\xfado \xe9 definir o significado e como voc\xea pode potencializar sua estrat\xe9gia de neg\xf3cios a partir da compreens\xe3o do ciclo de vida de uma API.\\n\\nAntes de mais nada, temos que compreender que APIs n\xe3o s\xe3o simplesmente ativos tecnol\xf3gicos, s\xe3o ativos de neg\xf3cio. A estrat\xe9gia de APIs deve estar conectada com a estrat\xe9gia de neg\xf3cios para que as organiza\xe7\xf5es consigam aumentar a experi\xeancia dos clientes aplicando conceitos de conectividade moderna, como arquitetura orientada a eventos, microsservi\xe7os, computa\xe7\xe3o em nuvem, intelig\xeancia artificial, open everything, e que estejam focadas em se tornarem cada vez mais conectadas, digitais e abertas!\\n\\nO ciclo de vida das APIs \xe9 o conceito em que elas existem sob v\xe1rias fases, e cada uma tem sua relev\xe2ncia em todo o processo de desenvolvimento, opera\xe7\xf5es e estrat\xe9gias de neg\xf3cio da organiza\xe7\xe3o. \xc9 importante ressaltar que n\xe3o existe consenso na comunidade sobre quais s\xe3o todos os est\xe1gios de vida de uma API, porque depender\xe1 de diversos fatores como pol\xedticas internas de desenvolvimento de APIs, processos de governan\xe7a e opera\xe7\xf5es da organiza\xe7\xe3o, tipo de API, casos de uso e etc. Ou seja, voc\xeas encontrar\xe3o conte\xfados que falam sobre 3 est\xe1gios, 4 est\xe1gios, 5 est\xe1gios e por a\xed vai. No fim das contas, a quantidade de est\xe1gios n\xe3o \xe9 o mais relevante, mas sim a explica\xe7\xe3o do ciclo como um todo.\\n\\nNesse conte\xfado, dividiremos o ciclo de vida em 7 est\xe1gios, que s\xe3o:\\n\\n- Planejamento\\n- Design\\n- Desenvolvimento\\n- Testes\\n- Publica\xe7\xe3o\\n- Monitoramento\\n- Aposentadoria\\n\\n## Planejamento\\n\\nTodas as fases do ciclo de vida da API t\xeam sua devida import\xe2ncia, mas \xe9 fato que se a primeira delas n\xe3o for bem planejada e executada, impactar\xe1 diretamente em todas as outras fases, seja no prazo de entrega, no desenvolvimento da pr\xf3pria API, na expectativa dos consumidores e por a\xed vai. Ent\xe3o, \xe9 preciso ter em mente que a API \xe9 concebida para ser utilizada; esse \xe9 o prop\xf3sito principal dela! No planejamento, todas as partes interessadas (stakeholders) dever\xe3o participar. Pessoas de backend, frontend, opera\xe7\xf5es, seguran\xe7a, de neg\xf3cio e tamb\xe9m poss\xedveis consumidores dessa API. No artigo em que escrevi sobre API First, aprofundo na import\xe2ncia e os benef\xedcios de adotar essa abordagem de desenvolvimento. Sua interface primeiro, a implementa\xe7\xe3o depois! Esse \xe9 um dos princ\xedpios de API First. Sendo assim, o planejamento se torna vital para todo o ciclo de vida, mapeando quais s\xe3o os cen\xe1rios de uso, recursos, opera\xe7\xf5es, patterns de seguran\xe7a, design e versionamento que ser\xe3o utilizados. Tudo isso deve ser definido no planejamento.\\n\\n## Design\\n\\nAp\xf3s o planejamento, come\xe7amos de fato a colocar a \\"m\xe3o na massa\\". Nessa fase, criamos a interface/contrato da nossa API, desenhando tudo que foi pensado e discutido no planejamento em um documento chamado swagger, utilizando a especifica\xe7\xe3o OpenAPI. Ent\xe3o, faremos o design dos par\xe2metros, recursos, opera\xe7\xf5es, autentica\xe7\xe3o, autoriza\xe7\xe3o, status codes, error handlings, modelos e etc. Sua documenta\xe7\xe3o deve ser autodescritiva! Outro princ\xedpio de API First. Quanto maior a experi\xeancia do desenvolvedor, mais r\xe1pido ser\xe1 o ROI, a absor\xe7\xe3o pelos consumidores e tamb\xe9m a dissemina\xe7\xe3o dessa API no mercado.\\n\\n## Desenvolvimento\\n\\nA utiliza\xe7\xe3o de ferramentas para automatizar e otimizar todo o processo de cria\xe7\xe3o e exposi\xe7\xe3o de uma API \xe9 necess\xe1ria, mas no desenvolvimento, ela se faz ainda mais importante. Ferramentas que consigam, a partir do contrato, gerar SDKs e mocks para que consumidores possam ir testando e dando feedback (e tamb\xe9m desenvolvendo as aplica\xe7\xf5es que v\xe3o consumir essa API) e ferramentas que consigam traduzir o modelo l\xf3gico de dados para modelo l\xf3gico computacional para que assim o desenvolvedor do backend consiga otimizar seu desenvolvimento. Esse \xe9 um conceito em engenharia de software que chamamos de paralelismo, e \xe9 uma das ess\xeancias e um dos maiores benef\xedcios da abordagem API First.\\n\\n## Testes\\n\\nOs testes tamb\xe9m fazem parte do desenvolvimento. Voc\xea n\xe3o testa s\xf3 quando vai colocar em produ\xe7\xe3o e sim durante todo o ciclo de desenvolvimento, certo? Certo?? Mas antes da virada para produ\xe7\xe3o, ser\xe3o feitos mais e mais testes para garantir que a publica\xe7\xe3o seja bem-sucedida! E assim como na fase de desenvolvimento, o maior aliado na fase de testes \xe9 o pr\xf3prio cliente, que ser\xe3o os consumidores dessa API de fato. Ent\xe3o, trabalhar com o conceito de beta testers \xe9 importante para a estrat\xe9gia como um todo, pois eles trar\xe3o feedback e com certeza (absoluta!) encontrar\xe3o erros, e ajustes ser\xe3o realizados. A utiliza\xe7\xe3o de mocks para acelerar o processo e diminuir o atrito nos testes de integra\xe7\xe3o tamb\xe9m \xe9 essencial. Al\xe9m disso, ferramentas de API Testing s\xe3o de extrema import\xe2ncia para que sejam validados os diversos tipos de cen\xe1rios que foram mapeados no planejamento, bem como testes de carga e seguran\xe7a.\\n\\n## Publica\xe7\xe3o\\n\\nUm ponto que n\xe3o foi comentado na fase do planejamento (propositalmente) e que deve ser desenhado nela \xe9 a estrat\xe9gia de divulga\xe7\xe3o dessa API, o go-to-market. Como disse no in\xedcio deste conte\xfado, a estrat\xe9gia de APIs deve estar conectada com a estrat\xe9gia de neg\xf3cios; temos que pensar nas nossas APIs como um produto, por isso o lan\xe7amento deve ser pensado estrategicamente tamb\xe9m. Qual o p\xfablico-alvo? Como ser\xe1 feita a divulga\xe7\xe3o? Por onde ser\xe1 feita a divulga\xe7\xe3o? Qual percentual de consumidores utilizando a API pretendemos alcan\xe7ar em X tempo? Essas s\xe3o algumas perguntas que devem estar respondidas desde a fase do planejamento, para que quando a API seja publicada, consigamos medir se os objetivos iniciais mapeados foram alcan\xe7ados. A utiliza\xe7\xe3o de um portal de desenvolvedores \xe9 fundamental, pois l\xe1 \xe9 a vitrine de suas APIs e \xe9 aliado na estrat\xe9gia de dissemina\xe7\xe3o dessa API para todo o ecossistema de consumidores, sejam parceiros, clientes internos ou externos.\\n\\n## Monitoramento\\n\\nEsperamos que o monitoramento seja a fase mais duradoura, e inversamente proporcional \xe0 dura\xe7\xe3o esperamos que sejam os problemas. Mas como diria minha v\xf3, querer n\xe3o \xe9 poder! \xc9 fato que problemas v\xe3o surgir e que a API precisar\xe1 ser melhorada, que coisas planejadas no in\xedcio talvez n\xe3o aconte\xe7am da forma esperada, que o mercado ou regula\xe7\xe3o mudou e agora \xe9 necess\xe1rio se adaptar\u2026 S\xe3o diversos os motivos para entender que monitorar a API \xe9 pe\xe7a chave para garantir que ela esteja acess\xedvel e altamente dispon\xedvel. A cria\xe7\xe3o de processo de retroalimenta\xe7\xe3o de melhoria cont\xednua \xe9 necess\xe1rio para garantir que a API esteja saud\xe1vel atrav\xe9s da an\xe1lise de status codes, lat\xeancia m\xe9dia, tamanho do payload e etc. Garantir que est\xe1 sendo utilizada, informa\xe7\xf5es como quantidade de aplica\xe7\xf5es que consomem, top 10 de aplica\xe7\xf5es, percentual de crescimento em X tempo, aplica\xe7\xf5es engajadas e desengajadas. E claro, n\xe3o s\xf3 monitoramento reativo, mas \xe9 necess\xe1rio monitoramento proativo, onde seja poss\xedvel configurar gatilhos a partir de comportamentos anormais da API que disparem alertas para que seja sanado um problema antes mesmo de acontecer, impactando o m\xednimo poss\xedvel as aplica\xe7\xf5es e consequentemente aumentando a experi\xeancia dos clientes. A utiliza\xe7\xe3o de uma plataforma de gerenciamento de APIs se torna item obrigat\xf3rio, pois ela conseguir\xe1 trazer todos esses dados de telemetria das APIs para que o monitoramento seja trabalhado de forma reativa e proativa, trazendo assim observabilidade do ecossistema de APIs da organiza\xe7\xe3o.\\n\\n## Aposentadoria\\n\\nAs APIs tamb\xe9m aposentam, e essa \xe9 a \xfaltima fase do ciclo de vida de uma API. Geralmente uma API \xe9 aposentada porque tem muitos bugs, \xe9 insegura, ineficiente, os custos s\xe3o altos, o servi\xe7o n\xe3o serve mais ao prop\xf3sito de neg\xf3cio e n\xe3o atende mais casos de uso. S\xe3o diversos os motivos para que uma API seja aposentada, e assim como em qualquer fase, o foco sempre deve ser em quem vai consumi-la, para que o impacto (nesse caso, da aposentadoria) seja o m\xednimo poss\xedvel. Aqui, comunica\xe7\xe3o \xe9 palavra-chave, os consumidores devem ser comunicados da forma mais transparente poss\xedvel que a API ser\xe1 aposentada, por que ser\xe1, quando ser\xe1 e como ser\xe1. Al\xe9m da comunica\xe7\xe3o atrav\xe9s dos canais com o cliente, tamb\xe9m h\xe1 estrat\xe9gias na pr\xf3pria API que podem auxiliar, como a utiliza\xe7\xe3o do header API Sunset, onde no retorno do response \xe9 inserido o header sunset com a data final daquela API. A ideia principal em cima do versionamento ou aposentadoria de uma API \xe9 que a mudan\xe7a deve ser gradual, assim como o p\xf4r-do-sol, para que gere o m\xednimo de impacto nos consumidores.\\n\\n## Conclus\xe3o\\n\\nNesse artigo, definimos o que \xe9 o ciclo de vida das APIs, quais s\xe3o as fases e as boas pr\xe1ticas que utilizamos em cada uma para garantir que a API cumpra o prop\xf3sito dela, que \xe9 ser utilizada! Ouso a dizer que \xe9 imposs\xedvel ter sucesso em todas as fases sem um processo de governan\xe7a que garanta consist\xeancia, seguran\xe7a e qualidade em escala para todo o processo de desenvolvimento e opera\xe7\xf5es das APIs. Seguindo as recomenda\xe7\xf5es deste artigo, provavelmente sua estrat\xe9gia de neg\xf3cios ser\xe1 potencializada pela sua estrat\xe9gia de API, e \xe9 exatamente sobre isso, o mindset de API Economy. Obrigado por quem leu at\xe9 aqui, nos vemos no pr\xf3ximo!"},{"id":"observabilidade-de-apis","metadata":{"permalink":"/blog/observabilidade-de-apis","editUrl":"https://github.com/universo01/website/blog/2024-07-20-observabilidade-de-apis.md","source":"@site/blog/2024-07-20-observabilidade-de-apis.md","title":"Observabilidade de APIs","description":"Em um mundo de aplica\xe7\xf5es distribu\xeddas, APIs t\xeam papel chave. Conectando sistemas para alavancar neg\xf3cios e elevar a experi\xeancia do desenvolvedor para outro n\xedvel. Dado o cen\xe1rio atual, temos cada vez mais servi\xe7os e consequentemente APIs, e precisamos de governan\xe7a e seguran\xe7a para que possamos garantir a qualidade e integridade das solu\xe7\xf5es que oferecemos. Por isso, fazer com que nossas APIs sejam observ\xe1veis \xe9 essencial para que elas cumpram seu prop\xf3sito principal, que \xe9 ser utilizada.","date":"2024-07-20T00:00:00.000Z","tags":[{"inline":true,"label":"APIs","permalink":"/blog/tags/ap-is"},{"inline":true,"label":"observabilidade","permalink":"/blog/tags/observabilidade"},{"inline":true,"label":"monitoramento","permalink":"/blog/tags/monitoramento"},{"inline":true,"label":"MELT","permalink":"/blog/tags/melt"},{"inline":true,"label":"RED","permalink":"/blog/tags/red"},{"inline":true,"label":"RUM","permalink":"/blog/tags/rum"}],"readingTime":7.405,"hasTruncateMarker":false,"authors":[{"name":"Dan","title":"Integration Architect","url":"https://github.com/it0dan","imageURL":"https://github.com/it0dan.png","key":"it0dan"}],"frontMatter":{"slug":"observabilidade-de-apis","title":"Observabilidade de APIs","authors":["it0dan"],"tags":["APIs","observabilidade","monitoramento","MELT","RED","RUM"]},"unlisted":false,"prevItem":{"title":"Ciclo de Vida das APIs","permalink":"/blog/ciclo-de-vida-das-apis"},"nextItem":{"title":"T\xedtulo do exemplo","permalink":"/blog/template-example"}},"content":"Em um mundo de aplica\xe7\xf5es distribu\xeddas, APIs t\xeam papel chave. Conectando sistemas para alavancar neg\xf3cios e elevar a experi\xeancia do desenvolvedor para outro n\xedvel. Dado o cen\xe1rio atual, temos cada vez mais servi\xe7os e consequentemente APIs, e precisamos de governan\xe7a e seguran\xe7a para que possamos garantir a qualidade e integridade das solu\xe7\xf5es que oferecemos. Por isso, fazer com que nossas APIs sejam observ\xe1veis \xe9 essencial para que elas cumpram seu prop\xf3sito principal, que \xe9 ser utilizada.\\n\\nNesse conte\xfado aprofundaremos no conceito de observabilidade no contexto de APIs. O que \xe9 essencial observarmos e boas pr\xe1ticas utilizadas para que atrav\xe9s dos dados de telemetria das APIs consigamos trabalhar de forma preditiva, evitando impacto no relacionamento com seu ecossistema de parceiros e clientes.\\n\\n## Defini\xe7\xe3o moderna de APIs\\n\\nAPI \xe9 acr\xf4nimo de Application Programming Interface e significa interface program\xe1vel da aplica\xe7\xe3o. Permite que diferentes sistemas consigam integrar entre si sem que eles precisem expor suas regras e l\xf3gicas de neg\xf3cio. Isso tudo atrav\xe9s de um contrato (swagger) utilizando a Especifica\xe7\xe3o OpenAPI. Dado o cen\xe1rio atual do mercado, onde cada vez mais empresas vem se tornando empresas de tecnologia, migrando suas estrat\xe9gias de neg\xf3cio para o digital e modernizando sua arquitetura para o contexto de eventos e microsservi\xe7os, as APIs t\xeam papel fundamental pois elas habilitam a comunica\xe7\xe3o por todo esse ecossistema distribu\xeddo. Com isso, APIs n\xe3o s\xe3o apenas ativos t\xe9cnicos da organiza\xe7\xe3o, e sim ativos de neg\xf3cio, onde a estrat\xe9gia de APIs deve estar alinhada com a estrat\xe9gia de neg\xf3cios para que empresas consigam sobreviver a esse campo de batalha digital.\\n\\n## Monitoramento & Observabilidade\\n\\n\xc9 importante definir e diferenciar monitoramento de observabilidade, por vezes ocorre confus\xe3o na compreens\xe3o desses conceitos que parecem a mesma coisa mas n\xe3o s\xe3o.\\n\\nMonitoramento \xe9 a a\xe7\xe3o de coletar, processar, analisar, agregar e disponibilizar dados sobre os sistemas em tempo real. E com isso nos auxiliar na detec\xe7\xe3o de um problema de forma \xe1gil.\\n\\nObservabilidade \xe9 definido como um mecanismo focado em coletar dados de telemetria para entender o que causou ou est\xe1 causando problema na nossa aplica\xe7\xe3o. Ent\xe3o diferente do monitoramento que auxilia na an\xe1lise e detec\xe7\xe3o de um problema, a observabilidade deve ter a capacidade de explicar o porqu\xea daquele comportamento.\\n\\nDito isso, podemos entender que esses dois conceitos aplicados em arquitetura moderna e distribu\xedda s\xe3o simbi\xf3ticos. Monitorar nossas APIs \xe9 essencial para que possamos trazer observabilidade e com isso investigar e resolver problemas da forma mais r\xe1pida poss\xedvel, gerando o m\xednimo de impacto nos consumidores dessas APIs.\\n\\n## MELT\\n\\nMELT \xe9 um acr\xf4nimo para m\xe9tricas, eventos, logs e traces. S\xe3o considerados tipos de dados de telemetria essenciais para observabilidade.\\n\\n- **M\xe9tricas** s\xe3o medidas num\xe9ricas coletadas durante o tempo. Como por exemplo o total de requisi\xe7\xf5es ou taxa de erro de um per\xedodo.\\n- **Eventos** s\xe3o a\xe7\xf5es que aconteceram ou est\xe3o acontecendo em um determinado intervalo de tempo. Por exemplo, quando um pedido \xe9 realizado por um cliente, ou o reabastecimento de produtos por um parceiro ou mesmo um ataque DDoS que a API est\xe1 sofrendo.\\n- **Logs** s\xe3o linhas de texto que sistemas produzem quando determinados blocos de c\xf3digo s\xe3o executados. No contexto das APIs, quando requisi\xe7\xf5es s\xe3o realizadas. Dessa forma s\xe3o salvos dados como quando foi feita a requisi\xe7\xe3o, qual a API, URI, recurso, opera\xe7\xe3o, m\xe9todo e etc.\\n- **Traces** s\xe3o intera\xe7\xf5es entre componentes que aconteceram durante a requisi\xe7\xe3o e a resposta. \xc9 o passo-a-passo de todo fluxo de chamada de uma API. Como por exemplo por quais sistemas ela percorreu, quais as manipula\xe7\xf5es e valida\xe7\xf5es foram realizadas bem como a origem, para onde foi encaminhada e quanto tempo gastou em cada a\xe7\xe3o.\\n\\nSe tratando de APIs, \xe9 primordial trazermos dados de telemetria de m\xe9tricas, eventos, logs e trace para que possamos ser mais assertivos na detec\xe7\xe3o dos sintomas e encontrar a causa raiz de algo que pode estar acontecendo e impactando os consumidores.\\n\\n## Golden Signals\\n\\nAgora que sabemos os tipos de dados de telemetria que devemos observar, precisamos entender quais s\xe3o os sinais que ser\xe3o gerados a partir desses dados que v\xe3o nos indicar quando o comportamento das nossas APIs est\xe1 anormal.\\n\\nO termo \\"sinais dourados\\" vem do livro Google SRE e representam quatro sinais essenciais que devem ser monitorados. A recomenda\xe7\xe3o \xe9 que se voc\xea pode monitorar apenas quatro sinais, que sejam eles.\\n\\n- **Lat\xeancia** - Tempo total da realiza\xe7\xe3o de uma chamada. Ela pode ser subdividida na lat\xeancia do servi\xe7o A, lat\xeancia do servi\xe7o B, lat\xeancia de rede, lat\xeancia do gateway e etc.\\n- **Tr\xe1fego** - Medida que determina a quantidade de atividades que a aplica\xe7\xe3o est\xe1 recebendo. No contexto das APIs geralmente s\xe3o a quantidade de requisi\xe7\xf5es por segundo (RPS) ou a quantidade de requisi\xe7\xf5es por minuto (RPM).\\n- **Erro** - Taxa de requisi\xe7\xf5es que falharam de forma expl\xedcita, como erros de servidor ou de cliente representados atrav\xe9s do status code. Ou de forma impl\xedcita, quando o status code de retorno \xe9 de sucesso mas no payload do response consta mensagem de erro.\\n- **Satura\xe7\xe3o** - Medida do qu\xe3o cheio um servi\xe7o est\xe1. Podemos medi-la atrav\xe9s da porcentagem de utiliza\xe7\xe3o de CPU, mem\xf3ria, largura da banda de rede e etc.\\n\\nCom esses sinais dourados devemos ser capazes de identificar a causa ra\xedz de qualquer problema com os nossos servi\xe7os. Inclusive um pode ser indicativo ou consequ\xeancia do outro. Por exemplo, seu servi\xe7o tem aumento significativo no tr\xe1fego (RPS acima da m\xe9dia), com isso ele come\xe7a a saturar e consequentemente aumentar sua lat\xeancia, ocasionando erros de timeout.\\n\\n## RED framework\\n\\nRED \xe9 um framework derivado dos 4 sinais dourados e nos dias atuais \xe9 o mais utilizado se tratando do monitoramento de microsservi\xe7os. Criado por Tom Wilkie, esse framework vem em contrapartida a utiliza\xe7\xe3o do framework USE, que \xe9 amplamente utilizado, mas com forte contexto de infraestrutura. Esse artigo explora toda a problem\xe1tica do USE e como ele n\xe3o se encaixa totalmente no monitoramento de servi\xe7os distribu\xeddos. RED \xe9 baseado em 3 sinais:\\n\\n- **Rate** - Quantidade de requisi\xe7\xf5es por segundo ou minuto.\\n- **Error** - Quantidade de requisi\xe7\xf5es falhas.\\n- **Duration** - Tempo de processamento de uma chamada.\\n\\nTotalmente aplic\xe1vel ao contexto de APIs, esses s\xe3o geralmente os sinais que mensuramos para monitorar e garantir que nossas APIs est\xe3o altamente dispon\xedveis e saud\xe1veis. E com eles podemos destrinchar an\xe1lises secund\xe1rias que nos dar\xe3o diversos insights de neg\xf3cio. Como por exemplo a quantidade de requisi\xe7\xf5es por APIs, por aplica\xe7\xf5es, por IPs e etc. E a mesma l\xf3gica pode ser aplicada na quantidade de requisi\xe7\xf5es falhas, onde poder\xedamos facilmente identificar que os erros est\xe3o vindo de uma aplica\xe7\xe3o que est\xe1 com token expirado e est\xe1 recebendo status code 401 entrando em um loop e aumentando nossa taxa de requisi\xe7\xf5es falhas. Ou, analisando o aumento na dura\xe7\xe3o das chamadas podemos correlacionar com a quantidade de requisi\xe7\xf5es e entender que podemos estar sofrendo essa sobrecarga justamente pela quantidade de requisi\xe7\xf5es acima da m\xe9dia em um dado per\xedodo.\\n\\nPara monitoramento de APIs, assim como para microsservi\xe7os, o framework RED \xe9 atualmente o mais utilizado. Com ele, conseguimos de forma simplificada monitorar dados essenciais das nossas APIs e consequentemente de forma simplificada identificar sintomas e a causa ra\xedz do que est\xe1 causando indisponibilidade ou intermit\xeancia no fluxo das integra\xe7\xf5es.\\n\\n## RUM framework\\n\\nReal User Monitoring \xe9 uma t\xe9cnica de monitoramento passiva que vem ganhando muita express\xe3o no mundo de DevOps. Diferente daquele modelo tradicional de monitoramento white-box, mais voltado para o comportamento interno das nossas aplica\xe7\xf5es, o monitoramento black-box vem sendo cada vez mais presente e necess\xe1rio no mundo das opera\xe7\xf5es. Esse tipo de monitoramento foca em monitorar o que o usu\xe1rio vai enxergar, como por exemplos de qual aplica\xe7\xe3o foi realizado o acesso, por onde ele est\xe1 acessando (geolocaliza\xe7\xe3o), o tipo de conectividade (3G, 4G\u2026), jornada de compra e etc. Dado o contexto atual de mercado, onde cada vez mais clientes t\xeam o poder de escolha, precisamos nos manter competitivos e para isso temos que entender a experi\xeancia que os usu\xe1rios est\xe3o tendo com o que n\xf3s oferecemos para eles.\\n\\n## Considera\xe7\xf5es finais\\n\\nN\xe3o posso te dizer o que sua organiza\xe7\xe3o deve monitorar, s\xe3o muitas vari\xe1veis e contextos diferentes. Mas entendendo os conceitos apresentados neste conte\xfado voc\xea conseguir\xe1 elevar o monitoramento das suas APIs para outro n\xedvel, trazendo observabilidade e conseguindo reagir a problemas mesmo antes que aconte\xe7am, gerando o m\xednimo de impacto poss\xedvel para os consumidores.\\n\\nEm um mundo cada vez mais distribu\xeddo, os casos de uso e contextos de neg\xf3cio formam uma infinidade de possibilidades, com isso \xe9 de extrema import\xe2ncia entender esses conceitos fundamentais para conseguir adequ\xe1-los \xe0 sua l\xf3gica de neg\xf3cio. Monitorar os dados certos s\xf3 ser\xe1 poss\xedvel se suas APIs forem observ\xe1veis. Para continuar competitivo no mercado atual precisamos olhar al\xe9m de m\xe9tricas internas, precisamos analisar m\xe9tricas externas, para garantir a melhor experi\xeancia n\xe3o s\xf3 para as aplica\xe7\xf5es que est\xe3o consumindo as APIs, mas tamb\xe9m para o usu\xe1rio final.\\n\\nObrigado por ter lido at\xe9 aqui, at\xe9 a pr\xf3xima!"},{"id":"template-example","metadata":{"permalink":"/blog/template-example","editUrl":"https://github.com/universo01/website/blog/2024-06-27-template.md","source":"@site/blog/2024-06-27-template.md","title":"T\xedtulo do exemplo","description":"Esse \xe9 um exemplo de uma postagem no blog em formato markdown.","date":"2024-06-27T00:00:00.000Z","tags":[{"inline":true,"label":"example","permalink":"/blog/tags/example"},{"inline":true,"label":"u01","permalink":"/blog/tags/u-01"}],"readingTime":0.06,"hasTruncateMarker":false,"authors":[{"name":"Rafael Mateus","title":"Software Engineer","url":"https://github.com/rafaelbmateus","imageURL":"https://github.com/rafaelbmateus.png","key":"rafaelbmateus"}],"frontMatter":{"slug":"template-example","title":"T\xedtulo do exemplo","authors":["rafaelbmateus"],"tags":["example","u01"]},"unlisted":false,"prevItem":{"title":"Observabilidade de APIs","permalink":"/blog/observabilidade-de-apis"},"nextItem":{"title":"Bem-vindos","permalink":"/blog/bem-vindos"}},"content":"Esse \xe9 um exemplo de uma postagem no blog em formato markdown."},{"id":"bem-vindos","metadata":{"permalink":"/blog/bem-vindos","editUrl":"https://github.com/universo01/website/blog/2021-08-26-welcome/index.md","source":"@site/blog/2021-08-26-welcome/index.md","title":"Bem-vindos","description":"Docusaurus blogging features are powered by the blog plugin.","date":"2021-08-26T00:00:00.000Z","tags":[{"inline":true,"label":"facebook","permalink":"/blog/tags/facebook"},{"inline":true,"label":"hello","permalink":"/blog/tags/hello"},{"inline":true,"label":"docusaurus","permalink":"/blog/tags/docusaurus"}],"readingTime":0.405,"hasTruncateMarker":false,"authors":[{"name":"Rafael Mateus","title":"Software Engineer","url":"https://github.com/rafaelbmateus","imageURL":"https://github.com/rafaelbmateus.png","key":"rafaelbmateus"}],"frontMatter":{"slug":"bem-vindos","title":"Bem-vindos","authors":["rafaelbmateus"],"tags":["facebook","hello","docusaurus"]},"unlisted":false,"prevItem":{"title":"T\xedtulo do exemplo","permalink":"/blog/template-example"}},"content":"[Docusaurus blogging features](https://docusaurus.io/docs/blog) are powered by the [blog plugin](https://docusaurus.io/docs/api/plugins/@docusaurus/plugin-content-blog).\\n\\nSimply add Markdown files (or folders) to the `blog` directory.\\n\\nRegular blog authors can be added to `authors.yml`.\\n\\nThe blog post date can be extracted from filenames, such as:\\n\\n- `2019-05-30-welcome.md`\\n- `2019-05-30-welcome/index.md`\\n\\nA blog post folder can be convenient to co-locate blog post images:\\n\\n![Docusaurus Plushie](./docusaurus-plushie-banner.jpeg)\\n\\nThe blog supports tags as well!\\n\\n**And if you don\'t want a blog**: just delete this directory, and use `blog: false` in your Docusaurus config."}]}}')}}]);